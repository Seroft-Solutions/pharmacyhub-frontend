"use client";

import { useState } from 'react';
import Link from 'next/link';
import { authService } from '@/features/core/auth/api/services/authService';
import { ResetStep } from '../../model/types';

// Import shadcn UI components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';

// Import icons
import { 
  KeyRound, 
  Mail, 
  AlertCircle, 
  Loader2,
  ArrowRight,
  CheckCircle,
  MailOpen,
  Shield,
  HelpCircle,
  DeviceTablet
} from 'lucide-react';

export const ForgotPasswordForm = () => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [currentStep, setCurrentStep] = useState<ResetStep>('request');
  
  // Use the auth service hook directly
  const { mutateAsync: requestPasswordReset, isPending } = authService.useRequestPasswordReset();

  const handleRequestReset = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (!email) {
      setError('Please enter your email address');
      return;
    }

    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(email)) {
      setError('Please enter a valid email address');
      return;
    }

    try {
      // Get device information for security
      const deviceId = `web-${Math.random().toString(36).substring(2, 9)}`;
      const userAgent = navigator.userAgent;
      const ipAddress = window.location.hostname;
      
      // Format data as the backend expects it
      const requestData = { 
        emailAddress: email,
        ipAddress,
        userAgent,
        deviceId
      };
      
      // Send password reset request
      await requestPasswordReset(requestData);
      
      // Move to success step
      setCurrentStep('success');
    } catch (err) {
      console.error("Password reset request error:", err);
      
      // User-friendly error message
      if (err instanceof Error) {
        const errorMessage = err.message.toLowerCase();
        if (errorMessage.includes('not found')) {
          setError('Account with this email not found');
        } else if (errorMessage.includes('rate limit') || errorMessage.includes('too many requests')) {
          setError('Too many reset attempts. Please try again later.');
        } else if (errorMessage.includes('no endpoint') || errorMessage.includes('404')) {
          setError('Service temporarily unavailable. Please try again later.');
        } else if (errorMessage.includes('400') || errorMessage.includes('bad request')) {
          setError('Invalid email format or missing required information.');
        } else if (errorMessage.includes('validation')) {
          setError('Validation failed. Please check your input.');
        } else {
          setError(err.message || 'Failed to send reset email');
        }
      } else {
        setError('An unexpected error occurred. Please try again later.');
      }
    }
  };

  const renderRequestStep = () => (
    <form onSubmit={handleRequestReset} className="space-y-6">
      <div className="space-y-4">
        <div className="bg-blue-50 p-4 rounded-lg border border-blue-100 mb-4">
          <div className="flex">
            <Shield className="h-5 w-5 text-blue-700 mt-0.5 flex-shrink-0" />
            <div className="ml-3">
              <h3 className="text-sm font-medium text-blue-800">Security Notice</h3>
              <p className="text-xs text-blue-700 mt-1">
                For your security, we'll send a reset link to your registered email address. The link will expire after 30 minutes.
              </p>
            </div>
          </div>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="email" className="text-gray-700 flex items-center">
            Email address
            <span className="text-red-500 ml-1">*</span>
          </Label>
          <div className="relative">
            <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-500" />
            <Input
              id="email"
              type="email"
              placeholder="Enter your registered email address"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="pl-10 border-gray-300 bg-white"
              required
            />
          </div>
          <p className="text-xs text-gray-500">
            We'll send a password reset link to this email address
          </p>
        </div>

        {/* Device information notice */}
        <div className="flex items-start space-x-2 border-t border-gray-100 pt-4 mt-4">
          <DeviceTablet className="h-4 w-4 text-gray-400 mt-0.5 flex-shrink-0" />
          <p className="text-xs text-gray-500">
            For your security, we'll include your device information in the reset email so you can verify the request came from you.
          </p>
        </div>
      </div>

      <Button
        type="submit"
        disabled={isPending}
        className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
      >
        {isPending ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Sending reset link...
          </>
        ) : (
          <>
            Send reset link
            <ArrowRight className="ml-2 h-4 w-4" />
          </>
        )}
      </Button>
    </form>
  );

  const renderSuccessStep = () => (
    <div className="space-y-6 text-center">
      <div className="flex justify-center">
        <div className="rounded-full bg-green-100 p-3 animate-fade-in-scale">
          <CheckCircle className="h-10 w-10 text-green-600" />
        </div>
      </div>
      
      <div className="space-y-2">
        <h3 className="text-xl font-medium text-gray-900">Check your email</h3>
        <p className="text-sm text-gray-600">
          We've sent a password reset link to <strong>{email}</strong>
        </p>
        <div className="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-100 text-left">
          <div className="flex items-start">
            <MailOpen className="h-5 w-5 text-blue-600 mr-2 mt-0.5" />
            <div>
              <p className="text-sm text-blue-800 font-medium">Next steps:</p>
              <ol className="list-decimal text-sm text-blue-700 ml-5 mt-1 space-y-1">
                <li>Check your email inbox (and spam folder)</li>
                <li>Click the reset link in the email</li>
                <li>Create a new secure password</li>
              </ol>
              <div className="mt-3 border-t border-blue-200 pt-3">
                <p className="text-xs text-blue-700">
                  <AlertCircle className="inline-block h-3 w-3 mr-1" />
                  For security reasons, the reset link will expire in 30 minutes.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="pt-4 space-y-3">
        <Button
          onClick={() => window.location.href = '/login'}
          className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
        >
          Return to login
        </Button>
        
        <p className="text-sm text-gray-500">
          Didn't receive the email?{' '}
          <button
            type="button"
            onClick={() => setCurrentStep('request')}
            className="text-blue-600 hover:text-blue-800 font-medium"
          >
            Try again
          </button>
        </p>
      </div>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 'request':
        return renderRequestStep();
      case 'success':
        return renderSuccessStep();
      default:
        return renderRequestStep();
    }
  };

  return (
    <Card className="border-none shadow-2xl backdrop-blur-sm bg-white/90">
      <CardHeader className="space-y-1 pb-6">
        <div className="flex justify-center mb-4">
          <div className="size-16 rounded-full bg-gradient-to-br from-blue-600 to-indigo-600 flex items-center justify-center p-4 shadow-lg">
            <KeyRound className="text-white h-8 w-8" />
          </div>
        </div>
        <CardTitle className="text-2xl font-bold text-center text-gray-800">
          Reset your password
        </CardTitle>
        <CardDescription className="text-center text-gray-600">
          {currentStep === 'request' && "Enter your email to receive a password reset link"}
          {currentStep === 'success' && "Check your email for password reset instructions"}
        </CardDescription>
      </CardHeader>

      <CardContent>
        {error && (
          <Alert className="mb-6 bg-red-50 border-red-200">
            <AlertCircle className="h-4 w-4 text-red-600" />
            <AlertTitle className="text-red-800">Reset failed</AlertTitle>
            <AlertDescription className="text-red-700">
              {error}
            </AlertDescription>
          </Alert>
        )}

        {renderCurrentStep()}

      </CardContent>

      {currentStep === 'request' && (
        <CardFooter className="flex flex-col items-center justify-center p-6 border-t bg-gray-50 rounded-b-lg">
          <p className="text-sm text-gray-600">
            Remember your password?{' '}
            <Link
              href="/login"
              className="font-medium text-blue-600 hover:text-blue-700 transition-colors"
            >
              Back to login
            </Link>
          </p>
          <div className="mt-4 flex items-center text-xs text-gray-500">
            <HelpCircle className="h-3 w-3 mr-1" />
            <span>
              Need help? <Link href="/support" className="text-blue-600 hover:underline">Contact Support</Link>
            </span>
          </div>
        </CardFooter>
      )}
    </Card>
  );
};

export default ForgotPasswordForm;
