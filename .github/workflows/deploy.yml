name: PharmacyHub Frontend Deployment

# Force the use of bash shell for all run steps
defaults:
  run:
    shell: bash

on:
  push:
    branches: [ dev, qa, main ]
  pull_request:
    branches: [ dev, qa, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  DOCKER_IMAGE: syedus06/pharmacyhub-frontend
  VPS_HOST: '103.135.45.76'
  VPS_USER: 'root'
  VPS_PORT: '22'
  CI: 'true'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine environment
        id: set_env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "ENV_FILE=.env.${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "DEPLOY_BRANCH=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/dev ]]; then
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "ENV_FILE=.env.dev" >> $GITHUB_ENV
            echo "DEPLOY_BRANCH=dev" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/qa ]]; then
            echo "DEPLOY_ENV=qa" >> $GITHUB_ENV
            echo "ENV_FILE=.env.qa" >> $GITHUB_ENV
            echo "DEPLOY_BRANCH=qa" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
            echo "ENV_FILE=.env.prod" >> $GITHUB_ENV
            echo "DEPLOY_BRANCH=main" >> $GITHUB_ENV
          else
            echo "Unknown branch, defaulting to dev"
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "ENV_FILE=.env.dev" >> $GITHUB_ENV
            echo "DEPLOY_BRANCH=dev" >> $GITHUB_ENV
          fi
          echo "Deploying to ${{ env.DEPLOY_ENV }} environment from $GITHUB_REF"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'

      # Only install dependencies if you have tests that need to run
      # If you don't have tests, you can comment out these steps
      - name: Install dependencies
        run: |
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm ci --legacy-peer-deps --prefer-offline --no-audit --progress=false
          else
            echo "Skipping dependency installation as no tests are needed"
          fi
      
      - name: Run tests
        run: |
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test || echo "No tests found, skipping"
          else
            echo "Skipping tests as they are not configured"
          fi
      
      # We'll remove this step as the build will be done in the Dockerfile
      # - name: Build Next.js application
      #   run: npm run build
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DEPLOY_ENV }}
          build-args: |
            NODE_ENV=${{ env.DEPLOY_ENV }}
            ENV_FILE=deploy/env/${{ env.ENV_FILE }}
          # Improved caching strategy
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.DEPLOY_ENV }}
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          # Add platform-specific build to speed up
          platforms: linux/amd64
          # Enable build concurrency
          provenance: false
          # Add build output to see progress
          outputs: type=image,name=${{ env.DOCKER_IMAGE }}:${{ env.DEPLOY_ENV }},push-by-digest=false,push=true
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Disable host key checking
          echo "Host ${{ env.VPS_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} 'echo "SSH connection successful"'

      - name: Backup frontend logs (if any)
        run: |
          echo "Backing up frontend logs before deployment..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            if [ -d \"/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/logs\" ] && [ \"\$(ls -A /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/logs)\" ]; then
              echo 'Found frontend logs, creating backup...'
              TIMESTAMP=\$(date +\"%Y%m%d_%H%M%S\")
              mkdir -p \"/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/logs/backup_\${TIMESTAMP}\"
              cp -r /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/logs/*.log /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/logs/backup_\${TIMESTAMP}/ 2>/dev/null || echo 'No log files found to back up'
              echo 'Frontend logs backed up successfully.'
            else
              echo 'No existing frontend logs found, skipping backup.'
            fi
          "

      - name: Create deployment directories on VPS
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/${{ env.DEPLOY_ENV }}"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/logs"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/data/frontend"

      - name: Stop existing containers
        run: |
          echo "Stopping any existing frontend containers gracefully..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            if [ -f \"/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/docker-compose.yml\" ]; then
              cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && 
              echo 'Stopping containers gracefully with 30s timeout...' && 
              docker compose stop -t 30 || true && 
              echo 'Taking down containers...' && 
              docker compose down --remove-orphans || true && 
              echo 'Existing containers successfully stopped'
            else
              echo 'No existing docker-compose.yml found, skipping container stop'
            fi
          "
      
      - name: Copy deployment files to VPS
        run: |
          # Create a simple directory structure
          mkdir -p ./deploy_temp
          
          # First verify the files exist
          echo "Verifying source files..."
          ls -la deploy/docker/
          ls -la deploy/env/
          ls -la deploy/scripts/
          
          # Copy files with confirmation
          echo "Copying docker-compose file..."
          cp deploy/docker/docker-compose.${{ env.DEPLOY_ENV }}.yml ./deploy_temp/
          
          # Create a file with the correct name directly in the target directory
          echo "Creating environment file directly on the server..."
          cat deploy/env/${{ env.ENV_FILE }} > .env.tmp
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} .env.tmp ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/.env
          
          echo "Copying script files..."
          cp deploy/scripts/*.sh ./deploy_temp/
          
          # Verify the copy worked
          echo "Verifying files in deploy_temp directory:"
          ls -la ./deploy_temp/
          
          # Use scp instead of rsync (which may not be available)
          echo "Copying files to remote server..."
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} -r ./deploy_temp/* ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/
          
          # Verify the files were copied to the server
          echo "Verifying files on remote server:"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "ls -la /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/"
      
      - name: Deploy frontend
        run: |
          # Execute commands one by one to identify any issues
          echo "Renaming docker-compose file..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && mv -v docker-compose.${{ env.DEPLOY_ENV }}.yml docker-compose.yml"
          
          echo "Making scripts executable..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && chmod +x *.sh"
          
          # Set environment variables and run deployment
          echo "Running deployment script..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && export DOCKER_USERNAME='${{ secrets.DOCKER_USERNAME }}' && export DOCKER_PASSWORD='${{ secrets.DOCKER_PASSWORD }}' && export DOCKER_IMAGE='${{ env.DOCKER_IMAGE }}' && export CI=true && ./deploy.sh ${{ env.DEPLOY_ENV }}"
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment success..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && 
            echo 'Checking container status...' && 
            if docker ps | grep -q 'pharmacyhub-frontend-${{ env.DEPLOY_ENV }}'; then
              echo 'Frontend container is running successfully' && 
              docker ps | grep 'pharmacyhub-frontend-${{ env.DEPLOY_ENV }}'
            else
              echo 'Frontend container failed to start!' && 
              docker ps -a | grep 'pharmacyhub-frontend-${{ env.DEPLOY_ENV }}' && 
              docker compose logs
              exit 1
            fi
          "
          
          echo "PharmacyHub Frontend for ${{ env.DEPLOY_ENV }} environment deployed successfully!"
          
          if [ "${{ env.DEPLOY_ENV }}" == "dev" ]; then
            echo "Frontend is now accessible at https://dev.pharmacyhub.pk"
          elif [ "${{ env.DEPLOY_ENV }}" == "qa" ]; then
            echo "Frontend is now accessible at https://qa.pharmacyhub.pk"
          elif [ "${{ env.DEPLOY_ENV }}" == "prod" ]; then
            echo "Frontend is now accessible at https://www.pharmacyhub.pk"
          fi
